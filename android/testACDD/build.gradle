// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects { project ->
    def attachingProjects = ["plugincluster"]
    attachingProjects.each { aprj ->
        if (project.name.contains(aprj)) {
            project.tasks.whenTaskAdded { task ->
                if (task.name.equals('compileReleaseJavaWithJavac')) {
                    Task compileModuleAsJar = tasks.create(name : "compileModuleAsJar") << {
                        boolean isWindowsOS = org.gradle.internal.os.OperatingSystem.current().isWindows()

                        println "${project.name}:compileModuleAsJar begin isWindows OS : ${isWindowsOS}"

                        def srcDir = "${project.buildDir}/intermediates/classes/release${isWindowsOS ? '' : '/'}"
                        println "${project.name}:srcDir : ${srcDir}"

                        def destFile = "${project.buildDir}/${project.name}.jar"
                        println "${project.name}:destFile : ${destFile}"

                        exec {
                            executable "jar"
                            args = isWindowsOS ?
                                    ["cf", destFile, "-C", srcDir, "", "."] :
                                    ["cf", destFile, "-C", srcDir, ""]
                        }

                        println "${project.name}:compileModuleAsJar end"
                    }

                    compileModuleAsJar.dependsOn task
                }
            }
            println "compileModuleAsJar task attached : ${project.name}"
        }
    }
}


def getSdkDir() {
    def SDK_DIR = System.getenv("ANDROID_HOME")
    if (SDK_DIR == null) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("local.properties")))
        SDK_DIR = props.get('sdk.dir');
    }
    return SDK_DIR
}
